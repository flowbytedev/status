@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Application.Shared.Models.User

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div class="text-center text-gray-500">
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715" class="text-blue-600 hover:text-blue-500">article
            about setting up this ASP.NET application to support logging in via external services</a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <div class="space-y-3">
                @foreach (var provider in externalLogins)
                {
                    @if (provider.Name == "MicrosoftOidc")
                    {
                        <FluentButton 
                            Type="ButtonType.Submit" 
                            Name="provider" 
                            Value="@provider.Name"
                            Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #e5e7eb; background-color: white; color: #374151; display: flex; align-items: center; justify-content: center; gap: 12px; font-weight: 500;">
                            <svg width="20" height="20" viewBox="0 0 23 23" fill="none">
                                <path d="M21.4 0H1.6C0.72 0 0 0.72 0 1.6V21.4C0 22.28 0.72 23 1.6 23H21.4C22.28 23 23 22.28 23 21.4V1.6C23 0.72 22.28 0 21.4 0Z" fill="#F3F3F3" />
                                <path d="M21.4 0H1.6C0.72 0 0 0.72 0 1.6V21.4C0 22.28 0.72 23 1.6 23H21.4C22.28 23 23 22.28 23 21.4V1.6C23 0.72 22.28 0 21.4 0Z" fill="#F35325" />
                                <path d="M11.5 0H1.6C0.72 0 0 0.72 0 1.6V11.5H11.5V0Z" fill="#81BC06" />
                                <path d="M23 11.5V1.6C23 0.72 22.28 0 21.4 0H11.5V11.5H23Z" fill="#05A6F0" />
                                <path d="M11.5 23H21.4C22.28 23 23 22.28 23 21.4V11.5H11.5V23Z" fill="#FFBA08" />
                            </svg>
                            Continue with @provider.DisplayName
                        </FluentButton>
                    }
                    else 
                    {
                        <FluentButton 
                            Type="ButtonType.Submit" 
                            Name="provider"
                            Value="@provider.Name"
                            Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #e5e7eb; background-color: white; color: #374151; display: flex; align-items: center; justify-content: center; gap: 12px; font-weight: 500;">
                            Continue with @provider.DisplayName
                        </FluentButton>
                    }
                }
            </div>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
