@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using Application.Shared.Models.User
@using Application.Shared.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IOptions<AuthenticationSettings> AuthSettings

<PageTitle>Log in</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
    <div class="max-w-md w-full space-y-8">
        <div class="bg-white rounded-xl shadow-2xl p-8">
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-2">Welcome back</h1>
                <p class="text-gray-600">Please sign in to your account</p>
            </div>

            <StatusMessage Message="@errorMessage" />

            @if (AuthSettings.Value.HasUsernamePasswordLogin)
            {
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="space-y-6">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-4">
                        <div>
                            <label for="username" class="block text-sm font-medium text-gray-700 mb-2">Username</label>
                            <FluentTextField 
                                Name="Input.UserName" 
                                @bind-Value="Input.UserName" 
                                AutoComplete="username" 
                                Required="true" 
                                Placeholder="Enter your username" 
                                Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #d1d5db;" />
                            <FluentValidationMessage For="() => Input.UserName" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                            <FluentTextField 
                                type="password" 
                                Name="Input.Password" 
                                @bind-Value="Input.Password" 
                                AutoComplete="current-password" 
                                Required="true" 
                                Placeholder="Enter your password" 
                                Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #d1d5db;" />
                            <FluentValidationMessage For="() => Input.Password" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div class="flex items-center justify-between">
                            <FluentCheckbox Name="Input.RememberMe" @bind-Value="Input.RememberMe" Label="Remember me" />
                            <FluentAnchor 
                                Appearance="Appearance.Hypertext" 
                                Href="Account/ForgotPassword" 
                                class="text-blue-600 hover:text-blue-500 text-sm">
                                Forgot password?
                            </FluentAnchor>
                        </div>

                        <FluentButton 
                            Type="ButtonType.Submit" 
                            Appearance="Appearance.Accent" 
                            Style="width: 100%; height: 48px; border-radius: 8px; background-color: #3b82f6; font-weight: 600;">
                            Sign in
                        </FluentButton>
                    </div>
                </EditForm>

                @if (externalLogins.Length > 0)
                {
                    <div class="mt-6">
                        <div class="relative">
                            <div class="absolute inset-0 flex items-center">
                                <div class="w-full border-t border-gray-300"></div>
                            </div>
                            <div class="relative flex justify-center text-sm">
                                <span class="px-2 bg-white text-gray-500">Or continue with</span>
                            </div>
                        </div>
                        <div class="mt-6">
                            <ExternalLoginPicker />
                        </div>
                    </div>
                }

                <div class="text-center mt-6">
                    <span class="text-gray-600">Don't have an account? </span>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" 
                       class="text-blue-600 hover:text-blue-500 font-medium">
                        Sign up
                    </a>
                </div>

                <div class="text-center mt-4">
                    <a href="Account/ResendEmailConfirmation" class="text-blue-600 hover:text-blue-500 text-sm">
                        Resend email confirmation
                    </a>
                </div>
            }
            else
            {
                <div class="space-y-6">
                    <div class="text-center">
                        <p class="text-gray-600 mb-6">Please sign in using one of the external providers</p>
                    </div>
                    <ExternalLoginPicker />
                    <div class="text-center mt-6">
                        <span class="text-gray-600">Don't have an account? </span>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" 
                           class="text-blue-600 hover:text-blue-500 font-medium">
                            Sign up
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private AuthenticationScheme[] externalLogins = [];

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
        
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [MaxLength(100)]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
