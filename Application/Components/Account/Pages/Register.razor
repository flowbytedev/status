@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Authentication
@using Application.Shared.Models.User
@using Application.Shared.Models

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IOptions<AuthenticationSettings> AuthSettings
@inject IUserService UserService

<PageTitle>Register</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
    <div class="max-w-md w-full space-y-8">
        <div class="bg-white rounded-xl shadow-2xl p-8">
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-2">Create Account</h1>
                <p class="text-gray-600">Join us today and get started</p>
            </div>

            <StatusMessage Message="@Message" />

            @if (AuthSettings.Value.HasUsernamePasswordLogin)
            {
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" class="space-y-6">
                    <DataAnnotationsValidator />
                    <FluentValidationSummary class="text-red-500 mb-4" role="alert" />
                    
                    <div class="space-y-4">
                        <div>
                            <label for="username" class="block text-sm font-medium text-gray-700 mb-2">Username</label>
                            <FluentTextField 
                                Name="Input.UserName" 
                                @bind-Value="Input.UserName" 
                                AutoComplete="username" 
                                Required="true" 
                                Placeholder="Enter your username" 
                                Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #d1d5db;" />
                            <FluentValidationMessage For="() => Input.UserName" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                            <FluentTextField 
                                Name="Input.Email" 
                                @bind-Value="Input.Email" 
                                AutoComplete="email" 
                                Required="true" 
                                Placeholder="name@example.com" 
                                Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #d1d5db;" />
                            <FluentValidationMessage For="() => Input.Email" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                            <FluentTextField 
                                type="password" 
                                Name="Input.Password" 
                                @bind-Value="Input.Password" 
                                AutoComplete="new-password" 
                                Required="true" 
                                Placeholder="Enter your password" 
                                Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #d1d5db;" />
                            <FluentValidationMessage For="() => Input.Password" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-2">Confirm Password</label>
                            <FluentTextField 
                                type="password" 
                                Name="Input.ConfirmPassword" 
                                @bind-Value="Input.ConfirmPassword" 
                                AutoComplete="new-password" 
                                Required="true" 
                                Placeholder="Confirm your password" 
                                Style="width: 100%; height: 48px; border-radius: 8px; border: 1px solid #d1d5db;" />
                            <FluentValidationMessage For="() => Input.ConfirmPassword" class="text-red-500 text-sm mt-1" />
                        </div>

                        <FluentButton 
                            Type="ButtonType.Submit" 
                            Appearance="Appearance.Accent" 
                            Style="width: 100%; height: 48px; border-radius: 8px; background-color: #3b82f6; font-weight: 600;">
                            Create Account
                        </FluentButton>
                    </div>
                </EditForm>

                @if (externalLogins.Length > 0)
                {
                    <div class="mt-6">
                        <div class="relative">
                            <div class="absolute inset-0 flex items-center">
                                <div class="w-full border-t border-gray-300"></div>
                            </div>
                            <div class="relative flex justify-center text-sm">
                                <span class="px-2 bg-white text-gray-500">Or continue with</span>
                            </div>
                        </div>
                        <div class="mt-6">
                            <ExternalLoginPicker />
                        </div>
                    </div>
                }

                <div class="text-center mt-6">
                    <span class="text-gray-600">Already have an account? </span>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" 
                       class="text-blue-600 hover:text-blue-500 font-medium">
                        Sign in
                    </a>
                </div>
            }
            else
            {
                <div class="space-y-6">
                    <div class="text-center">
                        <p class="text-gray-600 mb-6">Please register using one of the external providers</p>
                    </div>
                    <ExternalLoginPicker />
                    <div class="text-center mt-6">
                        <span class="text-gray-600">Already have an account? </span>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" 
                           class="text-blue-600 hover:text-blue-500 font-medium">
                            Sign in
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        
        // Create workspace for the new user
        try
        {
            var workspace = await UserService.CreateWorkspaceForUser(Input.Email, userId);
            Logger.LogInformation("Workspace created for user: {WorkspaceId}", workspace.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create workspace for user {Email}", Input.Email);
            // Continue with registration even if workspace creation fails
        }
        
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "UserName")]
        [MaxLength(100)]
        public string UserName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
