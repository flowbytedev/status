@page "/workspaces"
@using Application.Shared.Models
@using Application.Shared.Models.User
@using Microsoft.FluentUI.AspNetCore.Components
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@attribute [Authorize]

<PageTitle>My Workspaces</PageTitle>

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="py-6 md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        My Workspaces
                    </h1>
                    <p class="mt-1 text-sm text-gray-500">
                        Workspaces you have access to and their member information
                    </p>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button @onclick="CreateWorkspace" 
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        New Workspace
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        @if (isLoading)
        {
            <div class="flex justify-center items-center h-64">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else if (workspaces?.Any() == true)
        {
            <!-- Workspaces Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var workspace in workspaces)
                {
                    <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 border border-gray-200">
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-4">
                                <div class="flex items-center">
                                    <div class="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center text-white font-semibold text-lg">
                                        @GetWorkspaceInitials(workspace.Name)
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-lg font-semibold text-gray-900">
                                            @workspace.Name
                                        </h3>
                                        <p class="text-sm text-gray-500">
                                            ID: @workspace.Id
                                        </p>
                                    </div>
                                </div>
                                @if (workspace.IsSelected == true)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        Current
                                    </span>
                                }
                            </div>

                            <div class="mb-4">
                                <div class="flex items-center text-sm text-gray-500 mb-2">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a1 1 0 011-1h6a1 1 0 011 1v4h3a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9a2 2 0 012-2h3z"></path>
                                    </svg>
                                    Created @workspace.CreatedOn?.ToString("MMM dd, yyyy")
                                </div>
                                @if (workspace.ModifiedOn.HasValue && workspace.ModifiedOn != workspace.CreatedOn)
                                {
                                    <div class="flex items-center text-sm text-gray-500">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                        Updated @workspace.ModifiedOn?.ToString("MMM dd, yyyy")
                                    </div>
                                }
                            </div>

                            <div class="flex space-x-2">
                                <FluentButton 
                                    Appearance="Appearance.Accent" 
                                    OnClick="@(() => NavigateToWorkspace(workspace.Id!))"
                                    style="flex: 1;">
                                    Open Workspace
                                </FluentButton>
                                
                                <FluentButton 
                                    Appearance="Appearance.Outline" 
                                    OnClick="@(() => ManageMembers(workspace.Id!))"
                                    title="Manage Members">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.People())" />
                                </FluentButton>
                                
                                <FluentButton 
                                    Appearance="Appearance.Outline" 
                                    OnClick="@(() => ViewWorkspaceDetails(workspace.Id!))"
                                    title="Workspace Details">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Info())" />
                                </FluentButton>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Empty State -->
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No workspaces</h3>
                <p class="mt-1 text-sm text-gray-500">
                    You don't have access to any workspaces yet. Create a new workspace to get started.
                </p>
                <div class="mt-6">
                    <button @onclick="CreateWorkspace" 
                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        New Workspace
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Workspace>? workspaces;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await SetupHeaders();
        await LoadWorkspaces();
    }

    private async Task SetupHeaders()
    {
        // Add user ID to headers
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                if (!_httpClient.DefaultRequestHeaders.Contains("UserId"))
                {
                    _httpClient.DefaultRequestHeaders.Add("UserId", userId);
                }
            }
        }
    }

    private async Task LoadWorkspaces()
    {
        isLoading = true;
        try
        {
            workspaces = await _httpClient.GetFromJsonAsync<List<Workspace>>("api/workspaces");
            
            // Mark the current workspace if we're in one
            var currentWorkspaceId = GetCurrentWorkspaceId();
            if (!string.IsNullOrEmpty(currentWorkspaceId) && workspaces != null)
            {
                var currentWorkspace = workspaces.FirstOrDefault(w => w.Id == currentWorkspaceId);
                if (currentWorkspace != null)
                {
                    currentWorkspace.IsSelected = true;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workspaces: {ex.Message}");
            workspaces = new List<Workspace>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string? GetCurrentWorkspaceId()
    {
        try
        {
            var uri = new Uri(_navigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            return query["w"];
        }
        catch
        {
            return null;
        }
    }

    private void NavigateToWorkspace(string workspaceId)
    {
        _navigationManager.NavigateTo($"/?w={workspaceId}");
    }

    private void ManageMembers(string workspaceId)
    {
        _navigationManager.NavigateTo($"/workspace/{workspaceId}/members");
    }

    private void ViewWorkspaceDetails(string workspaceId)
    {
        // Navigate to workspace details page (you can create this later)
        _navigationManager.NavigateTo($"/workspace/{workspaceId}/details");
    }

    private void CreateWorkspace()
    {
        _navigationManager.NavigateTo("/workspace/new");
    }

    private string GetWorkspaceInitials(string? workspaceName)
    {
        if (string.IsNullOrEmpty(workspaceName))
            return "W";
        
        var parts = workspaceName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        
        return workspaceName.Length >= 2 ? workspaceName.Substring(0, 2).ToUpper() : workspaceName.Substring(0, 1).ToUpper();
    }
}
