@page "/users/create"
@using Application.Shared.Models.User
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Create User</PageTitle>

<div class="min-h-screen bg-gray-50">
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header -->
        <div class="mb-8">
            <nav class="flex mb-4" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 md:space-x-3">
                    <li class="inline-flex items-center">
                        <button @onclick="NavigateToUsers" style="border: none;"
                                class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.196M17 20v-2a3 3 0 00-3-3H8a3 3 0 00-3 3v2m16 0v2H4v-2m13-4a2 2 0 100-4 2 2 0 000 4zm-5 0a2 2 0 100-4 2 2 0 000 4z"></path>
                            </svg>
                            Users
                        </button>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">Create User</span>
                        </div>
                    </li>
                </ol>
            </nav>

            <div class="text-center">
                <h1 class="text-3xl font-bold text-gray-900">Create New User</h1>
                <p class="mt-2 text-sm text-gray-600">Fill in the details below to create a new user account</p>
            </div>
        </div>

        <!-- Form -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-5 border-b border-gray-200">
                <h3 class="text-lg leading-6 font-medium text-gray-900">User Information</h3>
            </div>
            <div class="px-6 py-5">
                <EditForm Model="@userModel" OnValidSubmit="@HandleValidSubmit" FormName="create-user" novalidate>
                    <DataAnnotationsValidator />
                    <FluentValidationSummary />

                    <div class="space-y-6">
                        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                            <div>
                                <FluentTextField 
                                    Name="UserName" 
                                    @bind-Value="@userModel.UserName" 
                                    style="width: 100%;" 
                                    Label="Username" 
                                    Required 
                                    Placeholder="Enter username" />
                                <FluentValidationMessage For="@(() => userModel.UserName)" />
                            </div>
                            
                            <div>
                                <FluentTextField 
                                    Name="Email" 
                                    @bind-Value="@userModel.Email" 
                                    style="width: 100%;" 
                                    Label="Email" 
                                    Required 
                                    Placeholder="Enter email address" />
                                <FluentValidationMessage For="@(() => userModel.Email)" />
                            </div>
                        </div>

                        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                            <div>
                                <FluentTextField 
                                    Name="Password" 
                                    @bind-Value="@userModel.Password" 
                                    style="width: 100%;" 
                                    Label="Password" 
                                    Required 
                                    TextFieldType="TextFieldType.Password"
                                    Placeholder="Enter password" />
                                <FluentValidationMessage For="@(() => userModel.Password)" />
                            </div>
                            
                            <div>
                                <FluentTextField 
                                    Name="ConfirmPassword" 
                                    @bind-Value="@userModel.ConfirmPassword" 
                                    style="width: 100%;" 
                                    Label="Confirm Password" 
                                    Required 
                                    TextFieldType="TextFieldType.Password"
                                    Placeholder="Confirm password" />
                                <FluentValidationMessage For="@(() => userModel.ConfirmPassword)" />
                            </div>
                        </div>

                        @if (availableRoles?.Any() == true)
                        {
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Roles</label>
                                <div class="space-y-2 max-h-40 overflow-y-auto border border-gray-300 rounded-md p-3">
                                    @foreach (var role in availableRoles)
                                    {
                                        <div class="flex items-center">
                                            <input type="checkbox" 
                                                   id="role-@role" 
                                                   @onchange="@((ChangeEventArgs e) => ToggleRole(role, (bool)(e.Value ?? false)))"
                                                   checked="@(userModel.Roles?.Contains(role) == true)"
                                                   class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                            <label for="role-@role" class="ml-2 block text-sm text-gray-900">
                                                @role
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Submit Buttons -->
                        <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                            <FluentButton 
                                Type="ButtonType.Button" 
                                Appearance="Appearance.Neutral" 
                                OnClick="@Cancel"
                                Disabled="@isSubmitting">
                                Cancel
                            </FluentButton>
                            
                            <FluentButton 
                                Type="ButtonType.Submit" 
                                Appearance="Appearance.Accent" 
                                Loading="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span>Creating...</span>
                                }
                                else
                                {
                                    <span>Create User</span>
                                }
                            </FluentButton>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "w")] public string WorkspaceId { get; set; } = string.Empty;
    
    private UserInputModel userModel = new();
    private List<string>? availableRoles = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize roles list if null
        userModel.Roles ??= new List<string>();
        
        // Set up headers
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Company-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Company-ID", WorkspaceId ?? "default-workspace");
        }

        await LoadAvailableRoles();
    }

    private async Task LoadAvailableRoles()
    {
        try
        {
            // In a real application, you would load available roles from an API
            // For now, we'll use some common roles
            availableRoles = new List<string>
            {
                "Admin",
                "Manager",
                "User",
                "Viewer",
                "Editor"
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading roles: {ex.Message}");
            availableRoles = new List<string>();
        }
    }

    private void ToggleRole(string role, bool isSelected)
    {
        userModel.Roles ??= new List<string>();
        
        if (isSelected && !userModel.Roles.Contains(role))
        {
            userModel.Roles.Add(role);
        }
        else if (!isSelected && userModel.Roles.Contains(role))
        {
            userModel.Roles.Remove(role);
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/users", userModel);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User created successfully!");
                Navigation.NavigateTo($"/users?w={WorkspaceId}");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to create user: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/users?w={WorkspaceId}");
    }

    private void NavigateToUsers()
    {
        Navigation.NavigateTo($"/users?w={WorkspaceId}");
    }
}
