@page "/users/{userId}"
@using Application.Shared.Models.User
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>User Details</PageTitle>

<div class="min-h-screen bg-gray-50">
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
    }
    else if (user != null)
    {
        <!-- Header -->
        <div class="bg-white border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="py-6">
                    <!-- Breadcrumb -->
                    <nav class="flex mb-4" aria-label="Breadcrumb">
                        <ol class="inline-flex items-center space-x-1 md:space-x-3">
                            <li class="inline-flex items-center">
                                <button @onclick="NavigateToUsers" style="border: none;"
                                        class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600">
                                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                                    </svg>
                                    Users
                                </button>
                            </li>
                            <li>
                                <div class="flex items-center">
                                    <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                    </svg>
                                    <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">@user.UserName</span>
                                </div>
                            </li>
                        </ol>
                    </nav>

                    <!-- Title and Actions -->
                    <div class="md:flex md:items-center md:justify-between">
                        <div class="flex-1 min-w-0">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 h-12 w-12">
                                    <div class="h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center">
                                        <span class="text-lg font-medium text-blue-600">
                                            @GetUserInitials(user.UserName)
                                        </span>
                                    </div>
                                </div>
                                <div class="ml-4">
                                    <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                                        @user.UserName
                                    </h1>
                                    <p class="text-sm text-gray-500">@user.Email</p>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4 flex md:mt-0 md:ml-4 space-x-3">
                            <button @onclick="EditUser" 
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                                Edit User
                            </button>
                            @if (user.IsDeleted != true)
                            {
                                <button @onclick="DeleteUser" 
                                        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                    <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                    Delete User
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- User Information -->
                <div class="lg:col-span-2">
                    <div class="bg-white shadow rounded-lg">
                        <div class="px-6 py-5 border-b border-gray-200">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">User Information</h3>
                        </div>
                        <div class="px-6 py-5 space-y-6">
                            <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Username</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@user.UserName</dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Email</dt>
                                    <dd class="mt-1 text-sm text-gray-900 flex items-center">
                                        @user.Email
                                        @if (user.EmailConfirmed)
                                        {
                                            <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                Verified
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                                Pending
                                            </span>
                                        }
                                    </dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Phone Number</dt>
                                    <dd class="mt-1 text-sm text-gray-900">@(user.PhoneNumber ?? "Not provided")</dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Phone Confirmed</dt>
                                    <dd class="mt-1 text-sm text-gray-900">
                                        @if (user.PhoneNumberConfirmed)
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                Verified
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                Not Verified
                                            </span>
                                        }
                                    </dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Two-Factor Authentication</dt>
                                    <dd class="mt-1 text-sm text-gray-900">
                                        @if (user.TwoFactorEnabled)
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                Enabled
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                Disabled
                                            </span>
                                        }
                                    </dd>
                                </div>
                                <div>
                                    <dt class="text-sm font-medium text-gray-500">Account Status</dt>
                                    <dd class="mt-1 text-sm text-gray-900">
                                        @if (user.IsDeleted == true)
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                Deleted
                                            </span>
                                        }
                                        else if (user.LockoutEnd.HasValue && user.LockoutEnd > DateTimeOffset.UtcNow)
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                                Locked until @user.LockoutEnd.Value.ToString("MMM dd, yyyy HH:mm")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                Active
                                            </span>
                                        }
                                    </dd>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- User Roles -->
                    @if (userRoles?.Any() == true)
                    {
                        <div class="mt-6 bg-white shadow rounded-lg">
                            <div class="px-6 py-5 border-b border-gray-200">
                                <h3 class="text-lg leading-6 font-medium text-gray-900">User Roles</h3>
                            </div>
                            <div class="px-6 py-5">
                                <div class="flex flex-wrap gap-2">
                                    @foreach (var role in userRoles)
                                    {
                                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                                            @role
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Activity Information -->
                <div class="lg:col-span-1">
                    <div class="bg-white shadow rounded-lg">
                        <div class="px-6 py-5 border-b border-gray-200">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">Activity</h3>
                        </div>
                        <div class="px-6 py-5 space-y-6">
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Created</dt>
                                <dd class="mt-1 text-sm text-gray-900">
                                    @if (user.CreatedOn.HasValue)
                                    {
                                        <div>
                                            <div>@user.CreatedOn.Value.ToString("MMM dd, yyyy")</div>
                                            <div class="text-xs text-gray-500">@user.CreatedOn.Value.ToString("HH:mm")</div>
                                            @if (!string.IsNullOrEmpty(user.CreatedBy))
                                            {
                                                <div class="text-xs text-gray-500">by @user.CreatedBy</div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-gray-500">Unknown</span>
                                    }
                                </dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Last Modified</dt>
                                <dd class="mt-1 text-sm text-gray-900">
                                    @if (user.ModifiedOn.HasValue)
                                    {
                                        <div>
                                            <div>@user.ModifiedOn.Value.ToString("MMM dd, yyyy")</div>
                                            <div class="text-xs text-gray-500">@user.ModifiedOn.Value.ToString("HH:mm")</div>
                                            @if (!string.IsNullOrEmpty(user.ModifiedBy))
                                            {
                                                <div class="text-xs text-gray-500">by @user.ModifiedBy</div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-gray-500">Never</span>
                                    }
                                </dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Failed Login Attempts</dt>
                                <dd class="mt-1 text-sm text-gray-900">
                                    @user.AccessFailedCount
                                </dd>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Not Found -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div class="text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">User not found</h3>
                <p class="mt-1 text-sm text-gray-500">The user you're looking for doesn't exist or has been deleted.</p>
                <div class="mt-6">
                    <button @onclick="NavigateToUsers" 
                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Back to Users
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [SupplyParameterFromQuery(Name = "w")] public string WorkspaceId { get; set; }
    
    private ApplicationUser? user;
    private List<string>? userRoles;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
        await LoadUserRoles();
    }

    private async Task LoadUser()
    {
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Company-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Company-ID", WorkspaceId ?? "default-workspace");
        }

        try
        {
            user = await _httpClient.GetFromJsonAsync<ApplicationUser>($"api/users/{UserId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
            user = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserRoles()
    {
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Company-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Company-ID", WorkspaceId ?? "default-workspace");
        }

        try
        {
            userRoles = await _httpClient.GetFromJsonAsync<List<string>>($"api/users/{UserId}/roles");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user roles: {ex.Message}");
            userRoles = new List<string>();
        }
    }

    private void EditUser()
    {
        Navigation.NavigateTo($"/users/{UserId}/edit?w={WorkspaceId}");
    }

    private async Task DeleteUser()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{user?.UserName}'?");
        if (confirmed)
        {
            try
            {
                await _httpClient.DeleteAsync($"api/users/{UserId}");
                Navigation.NavigateTo($"/users?w={WorkspaceId}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting user: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error deleting user. Please try again.");
            }
        }
    }

    private string GetUserInitials(string? userName)
    {
        if (string.IsNullOrEmpty(userName))
            return "?";
        
        var parts = userName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        
        return userName.Length >= 2 ? userName.Substring(0, 2).ToUpper() : userName.Substring(0, 1).ToUpper();
    }

    private void NavigateToUsers()
    {
        Navigation.NavigateTo($"/users?w={WorkspaceId}");
    }
}
