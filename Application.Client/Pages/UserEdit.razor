@page "/users/{userId}/edit"
@using Application.Shared.Models.User
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient _httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Edit User</PageTitle>

<div class="min-h-screen bg-gray-50">
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
    }
    else if (user != null)
    {
        <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Header -->
            <div class="mb-8">
                <nav class="flex mb-4" aria-label="Breadcrumb">
                    <ol class="inline-flex items-center space-x-1 md:space-x-3">
                        <li class="inline-flex items-center">
                            <button @onclick="NavigateToUsers" style="border: none;"
                                    class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.196M17 20v-2a3 3 0 00-3-3H8a3 3 0 00-3 3v2m16 0v2H4v-2m13-4a2 2 0 100-4 2 2 0 000 4zm-5 0a2 2 0 100-4 2 2 0 000 4z"></path>
                                </svg>
                                Users
                            </button>
                        </li>
                        <li>
                            <div class="flex items-center">
                                <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                <button @onclick="NavigateToUserDetails" style="border: none;"
                                        class="ml-1 text-sm font-medium text-gray-700 hover:text-blue-600 md:ml-2">
                                    @user.UserName
                                </button>
                            </div>
                        </li>
                        <li>
                            <div class="flex items-center">
                                <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">Edit</span>
                            </div>
                        </li>
                    </ol>
                </nav>

                <div class="text-center">
                    <h1 class="text-3xl font-bold text-gray-900">Edit User</h1>
                    <p class="mt-2 text-sm text-gray-600">Update user information and permissions</p>
                </div>
            </div>

            <!-- Form -->
            <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-5 border-b border-gray-200">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">User Information</h3>
                </div>
                <div class="px-6 py-5">
                    <EditForm Model="@userModel" OnValidSubmit="@HandleValidSubmit" FormName="edit-user" novalidate>
                        <DataAnnotationsValidator />
                        <FluentValidationSummary />

                        <div class="space-y-6">
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <div>
                                    <FluentTextField 
                                        Name="UserName" 
                                        @bind-Value="@userModel.UserName" 
                                        style="width: 100%;" 
                                        Label="Username" 
                                        Required 
                                        Placeholder="Enter username" />
                                    <FluentValidationMessage For="@(() => userModel.UserName)" />
                                </div>
                                
                                <div>
                                    <FluentTextField 
                                        Name="Email" 
                                        @bind-Value="@userModel.Email" 
                                        style="width: 100%;" 
                                        Label="Email" 
                                        Required 
                                        Placeholder="Enter email address" />
                                    <FluentValidationMessage For="@(() => userModel.Email)" />
                                </div>
                            </div>

                            @if (availableRoles?.Any() == true)
                            {
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Roles</label>
                                    <div class="space-y-2 max-h-40 overflow-y-auto border border-gray-300 rounded-md p-3">
                                        @foreach (var role in availableRoles)
                                        {
                                            <div class="flex items-center">
                                                <input type="checkbox" 
                                                       id="role-@role" 
                                                       @onchange="@((ChangeEventArgs e) => ToggleRole(role, (bool)(e.Value ?? false)))"
                                                       checked="@(userModel.Roles?.Contains(role) == true)"
                                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                                <label for="role-@role" class="ml-2 block text-sm text-gray-900">
                                                    @role
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Submit Buttons -->
                            <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                                <FluentButton 
                                    Type="ButtonType.Button" 
                                    Appearance="Appearance.Neutral" 
                                    OnClick="@Cancel"
                                    Disabled="@isSubmitting">
                                    Cancel
                                </FluentButton>
                                
                                <FluentButton 
                                    Type="ButtonType.Button" 
                                    Appearance="Appearance.Outline" 
                                    OnClick="@ResetPassword"
                                    Disabled="@isSubmitting">
                                    Reset Password
                                </FluentButton>
                                
                                <FluentButton 
                                    Type="ButtonType.Submit" 
                                    Appearance="Appearance.Accent" 
                                    Loading="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span>Updating...</span>
                                    }
                                    else
                                    {
                                        <span>Update User</span>
                                    }
                                </FluentButton>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Not Found -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div class="text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">User not found</h3>
                <p class="mt-1 text-sm text-gray-500">The user you're trying to edit doesn't exist or has been deleted.</p>
                <div class="mt-6">
                    <button @onclick="NavigateToUsers" 
                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Back to Users
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [SupplyParameterFromQuery(Name = "w")] public string WorkspaceId { get; set; } = string.Empty;
    
    private ApplicationUser? user;
    private UserInputModel userModel = new();
    private List<string>? availableRoles = new();
    private List<string>? currentUserRoles = new();
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        // Set up headers
        if (!_httpClient.DefaultRequestHeaders.Contains("X-Company-ID"))
        {
            _httpClient.DefaultRequestHeaders.Add("X-Company-ID", WorkspaceId ?? "default-workspace");
        }

        await LoadUser();
        await LoadUserRoles();
        await LoadAvailableRoles();
        
        isLoading = false;
    }

    private async Task LoadUser()
    {
        try
        {
            user = await _httpClient.GetFromJsonAsync<ApplicationUser>($"api/users/{UserId}");
            if (user != null)
            {
                userModel.UserName = user.UserName;
                userModel.Email = user.Email;
                userModel.Roles = new List<string>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
            user = null;
        }
    }

    private async Task LoadUserRoles()
    {
        try
        {
            currentUserRoles = await _httpClient.GetFromJsonAsync<List<string>>($"api/users/{UserId}/roles");
            if (currentUserRoles != null)
            {
                userModel.Roles = new List<string>(currentUserRoles);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user roles: {ex.Message}");
            currentUserRoles = new List<string>();
            userModel.Roles = new List<string>();
        }
    }

    private async Task LoadAvailableRoles()
    {
        try
        {
            // In a real application, you would load available roles from an API
            // For now, we'll use some common roles
            availableRoles = new List<string>
            {
                "Admin",
                "Manager",
                "User",
                "Viewer",
                "Editor"
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading roles: {ex.Message}");
            availableRoles = new List<string>();
        }
    }

    private void ToggleRole(string role, bool isSelected)
    {
        userModel.Roles ??= new List<string>();
        
        if (isSelected && !userModel.Roles.Contains(role))
        {
            userModel.Roles.Add(role);
        }
        else if (!isSelected && userModel.Roles.Contains(role))
        {
            userModel.Roles.Remove(role);
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var response = await _httpClient.PutAsJsonAsync($"api/users/{UserId}", userModel);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User updated successfully!");
                Navigation.NavigateTo($"/users/{UserId}?w={WorkspaceId}");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to update user: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task ResetPassword()
    {
        var newPassword = await JSRuntime.InvokeAsync<string>("prompt", "Enter new password for the user:");
        if (!string.IsNullOrEmpty(newPassword))
        {
            var confirmPassword = await JSRuntime.InvokeAsync<string>("prompt", "Confirm the new password:");
            if (newPassword == confirmPassword)
            {
                try
                {
                    var resetModel = new UserInputModel
                    {
                        Password = newPassword,
                        ConfirmPassword = confirmPassword
                    };

                    var response = await _httpClient.PutAsJsonAsync($"api/users/{UserId}/resetPassword", resetModel);

                    if (response.IsSuccessStatusCode)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Password reset successfully!");
                    }
                    else
                    {
                        var errorMessage = await response.Content.ReadAsStringAsync();
                        await JSRuntime.InvokeVoidAsync("alert", $"Failed to reset password: {errorMessage}");
                    }
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Passwords do not match!");
            }
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/users/{UserId}?w={WorkspaceId}");
    }

    private void NavigateToUsers()
    {
        Navigation.NavigateTo($"/users?w={WorkspaceId}");
    }

    private void NavigateToUserDetails()
    {
        Navigation.NavigateTo($"/users/{UserId}?w={WorkspaceId}");
    }
}
